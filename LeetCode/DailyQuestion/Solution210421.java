/**
 * @Author sunflower_zzn
 * @Date 2021/4/21 9:24
 * @Description 91. 解码方法
 * 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
 * "AAJF" ，将消息分组为 (1 1 10 6)
 * "KJF" ，将消息分组为 (11 10 6)
 * 注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
 * 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
 * 题目数据保证答案肯定是一个 32 位 的整数。
 * <p>
 * 输入：s = "12"
 * 输出：2
 * 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
 * <p>
 * 输入：s = "226"
 * 输出：3
 * 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
 * <p>
 * 输入：s = "0"
 * 输出：0
 * 解释：没有字符映射到以 0 开头的数字。
 * 含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
 * 由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
 * <p>
 * 输入：s = "06"
 * 输出：0
 * 解释："06" 不能映射到 "F" ，因为字符串含有前导 0（"6" 和 "06" 在映射中并不等价）。
 * <p>
 * 提示：
 * 1 <= s.length <= 100
 * s 只包含数字，并且可能包含前导零。
 */
public class Solution210421 {
    public int numDecodings(String s) {
        //递归不可行，时间复杂度过高！考虑递推方案：动态规划
        int dp[] = new int[s.length() + 1];
        //dp[i]：前i个字符范围内可能的解码方式
        //dp[i]=dp[i−1],1⩽a≤9
        //dp[i]=dp[i−2],10⩽b⩽26
        //dp[i]=dp[i−1]+dp[i−2],1⩽a≤9,10⩽b⩽26
        dp[0] = 1;
        int pre = s.charAt(0) - '0';
        if (pre == 0) return 0;
        dp[1] = 1;
        for (int i = 2; i <= s.length(); i++) {
            int a = s.charAt(i - 1) - '0';
            int b = pre * 10 + a;
            pre = a;
            if (a > 0 && a <= 26) dp[i] += dp[i - 1];
            if (b >= 10 && b <= 26) dp[i] += dp[i - 2]; //dp[i]初始化为0，所以可以累加
        }
        return dp[s.length()];
    }
}
